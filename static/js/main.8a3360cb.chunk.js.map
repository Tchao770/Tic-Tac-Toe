{"version":3,"sources":["components/Tile.js","components/Gameboard.js","components/Logic/base.js","components/Game.js","components/Heading.js","App.js","index.js"],"names":["Tile","props","turn","setTurn","grids","setGrids","tileId","className","id","onClick","tile","document","getElementById","classList","toggle","console","log","symbol","updatedGrid","map","index","changeTile","Gameboard","gridsInit","useState","winningState","finished","DisplayResults","grid","resetGame","result","winO","winX","i","length","push","totalLen","winString","wO","wX","includes","verifyVictory","setFinish","displayResult","opacity","zIndex","style","resultStyle","handleReset","Game","playType","tiles","querySelectorAll","remove","emptyGrid","Heading","setPlayType","App","ReactDOM","render","StrictMode"],"mappings":"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","file":"static/js/main.8a3360cb.chunk.js","sourcesContent":["\r\nexport default function Tile(props) {\r\n    const { turn, setTurn, grids, setGrids, tileId } = props;\r\n    return (\r\n        <div className=\"Tile\" id={tileId} onClick={() => changeTile(turn, setTurn, grids, setGrids, tileId)}>\r\n            {grids[props.tileId]}\r\n        </div>\r\n    )\r\n}\r\n\r\nfunction changeTile(turn, setTurn, grids, setGrids, tileId) {\r\n    let tile = document.getElementById(`${tileId}`);\r\n    tile.classList.toggle(\"noHover\");\r\n    console.log(tile);\r\n    let symbol = (turn) ? \"O\" : \"X\";\r\n\r\n    let updatedGrid = grids.map((tile, index) => {\r\n        if (index === tileId) {\r\n            tile = symbol;\r\n        }\r\n        return tile;\r\n    });\r\n\r\n    setGrids(updatedGrid);\r\n    setTurn(!turn);\r\n}","import React, { useRef, useState } from 'react';\r\nimport Tile from './Tile';\r\n\r\n\r\nexport default function Gameboard(props) {\r\n    const { gridsInit, grids, setGrids } = props;\r\n    const [turn, setTurn] = useState(true);\r\n    return (\r\n        <div className=\"GameBoard\">\r\n            {gridsInit.map((tile, index) => {\r\n                return (\r\n                    <Tile\r\n                        key={index} tileId={index}\r\n                        turn={turn} setTurn={setTurn}\r\n                        grids={grids} setGrids={setGrids}\r\n                    />\r\n                )\r\n            })}\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from \"react\";\r\n\r\nconst winningState =\r\n    [\r\n        [0, 1, 2], [3, 4, 5],\r\n        [6, 7, 8], [0, 3, 6],\r\n        [1, 4, 7], [2, 5, 8],\r\n        [0, 4, 8], [2, 4, 6]\r\n    ];\r\n\r\nlet finished = false;\r\n\r\nexport default function DisplayResults(props) {\r\n    const { grid, resetGame } = props;\r\n    let { result } = verifyVictory(grid);\r\n    console.log(result + finished);\r\n    const [finish, setFinish] = useState(finished);\r\n\r\n    const displayResult = {\r\n        opacity: \"1\",\r\n        zIndex: \"1\",\r\n    };\r\n    displayResult.zIndex = (finished) ? \"1\" : \"-1\";\r\n    displayResult.opacity = (finished) ? \"1\" : \"0\";\r\n\r\n    function handleReset() {\r\n        finished = false;\r\n        setFinish(finished);\r\n        resetGame();\r\n        let resultStyle = document.getElementById(\"result\")\r\n        resultStyle.style.zIndex = \"-1\";\r\n        resultStyle.style.opacity = \"0\";\r\n    }\r\n\r\n    return (\r\n        <div className=\"Result\" id=\"result\" style={displayResult}>\r\n            <h2>{result}</h2>\r\n            <button className=\"Buttons\" onClick={() => handleReset()}>Play Again</button>\r\n        </div>\r\n    )\r\n}\r\n\r\n\r\nfunction verifyVictory(grid) {\r\n\r\n    let winO = [];\r\n    let winX = [];\r\n    let result = \"\";\r\n\r\n    for (var i = 0; i < grid.length; i++) {\r\n        if (grid[i] === 'O') {\r\n            winO.push(i);\r\n        }\r\n        else if (grid[i] === 'X') {\r\n            winX.push(i);\r\n        }\r\n    }\r\n    let totalLen = winO.length + winX.length;\r\n\r\n    for (let winString of winningState) {\r\n        let wO = [];\r\n        let wX = [];\r\n        for (let i = 0; i < winString.length; i++) {\r\n            if (winO.includes(winString[i]))\r\n                wO.push(winString[i]);\r\n            else if (winX.includes(winString[i]))\r\n                wX.push(winString[i]);\r\n        }\r\n        if (wO.length === 3) {\r\n            result = \"Player O Won!\";\r\n            finished = true;\r\n        }\r\n        else if (wX.length === 3) {\r\n            result = \"Player X Won!\";\r\n            finished = true;\r\n        }\r\n        else if ((totalLen === 9)) {\r\n            result = \"Draw!\";\r\n            finished = true;\r\n        }\r\n    }\r\n    return { result };\r\n}","import React from 'react'\r\nimport { useState } from 'react';\r\nimport Gameboard from './Gameboard';\r\nimport DisplayResults from './Logic/base';\r\n\r\nconst gridsInit = [\r\n    \"\", \"\", \"\",\r\n    \"\", \"\", \"\",\r\n    \"\", \"\", \"\"\r\n];\r\n\r\nexport default function Game(props) {\r\n    const { playType } = props;\r\n    const [grids, setGrids] = useState(gridsInit);\r\n\r\n    const resetGrid = () => {\r\n        let tiles = document.querySelectorAll(\".noHover\");\r\n\r\n        // Remove noHover class from tiles\r\n        for (let tile of tiles) {\r\n            tile.classList.remove(\"noHover\")\r\n        }\r\n\r\n        // Clear the grids upon reset\r\n        let emptyGrid = grids.map(grid => {\r\n            return grid = \"\";\r\n        })\r\n        setGrids(emptyGrid);\r\n    };\r\n\r\n    return (\r\n        <div className=\"Game\">\r\n            <Gameboard gridsInit={gridsInit} grids={grids} setGrids={setGrids} />\r\n            <DisplayResults grid={grids} resetGame={resetGrid} />\r\n        </div>\r\n    )\r\n}\r\n","import { useState } from \"react/cjs/react.development\";\r\nimport Game from \"./Game\";\r\n\r\nexport default function Heading() {\r\n    const [playType, setPlayType] = useState(\"\");\r\n    return (\r\n        <div className=\"App\">\r\n            <div className=\"Menu\">\r\n                <h1>Tic Tac Toe</h1>\r\n                <div className=\"playButton\">\r\n                    {/*<button className=\"Buttons\" id=\"PVC\" onClick={() => {\r\n                        setPlayType(\"PVC\");\r\n                        document.getElementById(\"PVC\").classList.toggle(\"Hold\");\r\n                    }}>Player vs. CPU</button>*/}\r\n                    <button className=\"Buttons\" id=\"PVP\" onClick={() => {\r\n                        setPlayType(\"PVP\");\r\n                        document.getElementById(\"PVP\").classList.toggle(\"Hold\");\r\n                    }}>Player vs. Player</button>\r\n                </div>\r\n            </div>\r\n            <Game playType={playType} />\r\n        </div>\r\n    )\r\n}","import './App.css';\nimport Heading from './components/Heading';\n\nfunction App() {\n\treturn (\n\t\t<div className=\"App\">\n\t\t\t<Heading />\n\t\t</div>\n\t);\n}\n\nexport default App;\t\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n"],"sourceRoot":""}